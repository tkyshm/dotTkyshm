snippet lager_compile 
alias lagacom
 -compile({parse_transform, lager_transform}).

snippet module
alias m
 -module(`expand("%:t:r")`).

snippet eunit
alias test
 -include_lib("eunit/include/eunit.hrl").

snippet common test
alias ct
 -include_lib("common_test/include/ct.hrl").
 -export([init_per_suite/1, end_per_suite/1, all/0]).

## for Webmachine snippet
snippet webmachine_resource_snippet
alias wb_r
  -module(`expand("%:t:r")`).
  -export([
            init/1,
            allowed_methods/2,
            accepted_content_types/2,
            post_is_create/2,
            create_path/2,
            to_html/2,
          ]).

  -include_lib("webmachine/include/webmachine.hrl").
  
  init([]) -> {ok, undefined}.

  %%%==================================================
  %%% Allow Methods and Accepted Content Types
  %%%==================================================
  
  
  %% Allowed HTTP methods
  allowed_methods(Req, State) ->
    {['GET','POST','PUT','DELETE'], Req, State}.
  
  %% Accepted content type
  accepted_content_types(Req, State) ->
    {[
      {"text/html", to_html},
      {"application/json", from_json}
     ], Req, State}.
  
  %%%==================================================
  %%% Post settings
  %%%==================================================
  
  %% creating a new resource from post request
  post_is_create(Req, State) ->
    {true, Req, State}.
  
  %% this function is called when post_is_create/2 returns true.
  %% return new resouce path( embeded 'Location' header).
  create_path(Req,State) ->
    {"new/path", Req, State}.
  
  
  %%%==================================================
  %%% Handler functions
  %%%==================================================
  
  %% GET
  to_html(#wm_reqdata{method = 'GET'} = Req, State) ->
    io:format("http request(method:~p).~n", [Req#wm_reqdata.method]), % for debug
    {"<html><body><h1>#`expand("%:t:r")`</h1></body></html>", Req, State}.
  

snippet webmachine_scaffold
alias scaffold_resource
  -module(`expand("%:t:r")`).
  -export([
           init/1,
           allowed_methods/2,
           accepted_content_types/2,
           post_is_create/2,
           create_path/2,
           to_html/2,
           to_json/2,
           create_resource/2,
           update_resource/2,
           delete_resource/2
          ]).
  
  -include_lib("webmachine/include/webmachine.hrl").
  
  init([]) -> {ok, undefined}.
  
  %%%==================================================
  %%% Allow Methods and Accepted Content Types
  %%%==================================================
  
  
  %% Allowed HTTP methods
  allowed_methods(Req, State) ->
    {['GET','POST','PUT','DELETE'], Req, State}.
  
  %% Accepted content type
  accepted_content_types(Req, State) ->
    {[
      {"text/html", to_html},
      {"application/json", from_json}
     ], Req, State}.
  
  %%%==================================================
  %%% Post settings
  %%%==================================================
  
  %% creating a new resource from post request
  post_is_create(Req, State) ->
    {true, Req, State}.
  
  %% this function is called when post_is_create/2 returns true.
  %% return new resouce path( embeded 'Location' header).
  create_path(Req,State) ->
    {"new/path", Req, State}.
  
  
  %%%==================================================
  %%% Handler functions
  %%%==================================================
  
  %% GET
  to_html(#wm_reqdata{method = 'GET'} = Req, State) ->
    % sample process
    io:format("http request(method:~p).~n", [Req#wm_reqdata.method]), % for debug
    {"<html><body><h1>#`expand("%:t:r")`</h1></body></html>", Req, State}.
  
  to_json(#wm_reqdata{method = 'GET'} = Req, State) ->
    % TODO: Get process
    io:format("http request(method:~p).~n", [Req#wm_reqdata.method]), % for debug
    {"{'json':'test'}", Req, State}.
  
  
  %% POST
  create_resource(#wm_reqdata{method = 'POST'} = Req, State) ->
    % TODO: create process
    io:format("json put request(method:~p).~n", [Req#wm_reqdata.method]),
    {true, Req, State}.
  
  %% PUT
  update_resource(#wm_reqdata{method = 'PUT'} = Req, State) ->
    % TODO: Update process
    io:format("json put request(method:~p).~n", [Req#wm_reqdata.method]),
    {true, Req, State}.
  
  %% DELETE
  delete_resource(Req, State) ->
     % TODO: Delete process
     io:format("delete request(method:~p).~n", [Req#wm_reqdata.method]),
     {true, Req, State}.
