snippet child_spec
alias child
 SupFlags = #{
     strategy  => one_for_one,
     intensity => 1000,
     period    => 3600
  },

 Spec = #{
     id       => 'id',
     start    => {'module', start_link, [Args]},
     restart  => permanent,
     shutdown => 2000,
     type     => worker,
     modules  => ['module']
 },

snippet module
alias mod
 -module(`expand('%:t:r')`).

snippet eunit
alias eunit
 -include_lib("eunit/include/eunit.hrl").
 
 main_test_() ->
     {foreach,
      fun setup/0, %% setup
      fun teardown/1,  %% teardown
      [
       fun sample_test/1
      ]
     }.

 setup() -> ok.
 teardown(_Config) -> ok.
 sample_test(_Config) ->
     %% Test
     [
     ].

snippet dump
alias dump
	io:format("dump: ~p~n", [${1:val}]),

snippet lager_sysconf
alias lagerconf
 {lager, [
          {log_root, "./logs/lager"},
          {handlers, [
                      {lager_console_backend, [info,
                                               {lager_default_formatter,
                                                [
                                                 "level:", severity,
                                                 "\tnode:", node,
                                                 "\tpid:",pid,
                                                 "\tmsg:\"", message, "\"",
                                                 "\tmodule:", module,
                                                 "\tfunction:", function,
                                                 "\tline:", line,
                                                 "\ttimestamp:", date, "T", time,
                                                 "\n"
                                                ]
                                               }
                                              ]
                      },
                      {lager_file_backend, [{file, "access.log"},
                                            {level, info},
                                            {count, 5},
                                            {date, "$D0"},
                                            {size, 10485760},
                                            {formatter, lager_default_formatter},
                                            {formatter_config,
                                             [
                                              "level:", severity,
                                              "\tnode:", node,
                                              "\tpid:",pid,
                                              "\tmsg:\"", message, "\"",
                                              "\tmodule:", module,
                                              "\tfunction:", function,
                                              "\tline:", line,
                                              "\ttimestamp:", date, "T", time,
                                              "\n"
                                             ]
                                            }
                                           ]
                      }
                     ]
          }
         ]
 }

snippet cowboy_disp
alias cwdisp
 Dispatch = cowboy_router:compile([
     { '_', 
         [ { "${1:pattern}", ${2:handler}, [${3:opts}] } ]
     }
 ]),

snippet cowboy_spec
alias cwspec
 ranch:child_spec(${1}
     , ${2:connection_pool_size}
     , ranch_tcp
     , [ { port, ${3:port_num} } ]
     , cowboy_protocol
     , [ { env, [ { dispatch, ${4:dispatcher} } ] } ]
 ),

snippet server_cowboy
 new_server(Port) ->
   Dispatch = cowboy_router:compile([
       { '_', [
           { "/api/:path", enqueue_handler, [] },
       ]}
   ]),

   Opts = #{
     env             => #{dispatch => Dispatch},
     request_timeout => 15000
    },
   {ok, _} = cowboy:start_clear(delay_httpd, 100, [{port, Port}], Opts).


snippet cowboy_rest_handler
 -export([init/2]).
 -export([content_types_accepted/2]).
 -export([allowed_methods/2]).
 -export([post_bench/2]).
 
 init(Req, Opts) ->
     {cowboy_rest, Req, Opts}.
 
 allowed_methods(Req, State) ->
     {[<<"POST">>], Req, State}.
 
 content_types_accepted(Req, State) ->
     {[
       {{<<"application">>, <<"json">>, '*'}, post_bench}
      ], Req, State}.
 
 post_bench(Req, State) ->
     Body = <<"{\"bench\": {\"message\": \"hello world\"}}">>,
     {stop, cowboy_req:reply(200, #{}, Body, Req), State}.
